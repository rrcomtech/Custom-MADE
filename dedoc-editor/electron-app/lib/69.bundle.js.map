{"version":3,"sources":["webpack:///../node_modules/@theia/typehierarchy/src/browser/tree/typehierarchy-tree-container.ts","webpack:///../node_modules/@theia/typehierarchy/src/browser/tree/typehierarchy-tree-model.ts","webpack:///../node_modules/@theia/typehierarchy/src/browser/tree/typehierarchy-tree-widget.tsx","webpack:///../node_modules/@theia/typehierarchy/src/browser/tree/typehierarchy-tree.ts","webpack:///../node_modules/@theia/typehierarchy/src/browser/typehierarchy-contribution.ts","webpack:///../node_modules/@theia/typehierarchy/src/browser/typehierarchy-frontend-module.ts","webpack:///../node_modules/@theia/typehierarchy/src/browser/typehierarchy-service.ts","webpack:///../node_modules/@theia/typehierarchy/src/browser/style/index.css?509c","webpack:///../node_modules/@theia/typehierarchy/src/browser/style/index.css"],"names":[],"mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;;;kFAckF;;AAGlF,8HAAyH;AACzH,0JAAyD;AACzD,4KAAoE;AACpE,+KAAsE;AAEtE,SAAS,4BAA4B,CAAC,MAA4B;IAC9D,IAAM,KAAK,GAAG,0BAAmB,CAAC,MAAM,CAAC,CAAC;IAE1C,KAAK,CAAC,MAAM,CAAC,eAAQ,CAAC,CAAC;IACvB,KAAK,CAAC,IAAI,CAAC,sCAAiB,CAAC,CAAC,MAAM,EAAE,CAAC;IACvC,KAAK,CAAC,MAAM,CAAC,WAAI,CAAC,CAAC,SAAS,CAAC,sCAAiB,CAAC,CAAC;IAEhD,KAAK,CAAC,MAAM,CAAC,oBAAa,CAAC,CAAC;IAC5B,KAAK,CAAC,IAAI,CAAC,iDAAsB,CAAC,CAAC,MAAM,EAAE,CAAC;IAC5C,KAAK,CAAC,MAAM,CAAC,gBAAS,CAAC,CAAC,SAAS,CAAC,iDAAsB,CAAC,CAAC;IAE1D,KAAK,CAAC,IAAI,CAAC,mDAAuB,CAAC,CAAC,MAAM,EAAE,CAAC;IAC7C,KAAK,CAAC,MAAM,CAAC,iBAAU,CAAC,CAAC,SAAS,CAAC,mDAAuB,CAAC,CAAC;IAE5D,OAAO,KAAK,CAAC;AACjB,CAAC;AAED,SAAgB,yBAAyB,CAAC,MAA4B;IAClE,OAAO,4BAA4B,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,mDAAuB,CAAC,CAAC;AAC7E,CAAC;AAFD,8DAEC;;;;;;;;;;;;;;ACzCD;;;;;;;;;;;;;;kFAckF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAElF,qGAA+C;AAE/C,oJAAwE;AACxE,oNAAgI;AAChI,+JAAwE;AACxE,0JAAyD;AAGzD;IAA4C,0CAAa;IAAzD;;IA2DA,CAAC;IAtDa,2CAAU,GAApB,UAAqB,IAAc;QAC/B,oDAAoD;IACxD,CAAC;IAED;;OAEG;IACG,2CAAU,GAAhB,UAAiB,OAAsC;;;;;;wBACnD,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;wBAC1B,IAAI,CAAC,IAA0B,CAAC,OAAO,GAAG,SAAS,CAAC;wBAC7C,QAAQ,GAA4B,OAAO,SAAnC,EAAE,UAAU,GAAgB,OAAO,WAAvB,EAAE,SAAS,GAAK,OAAO,UAAZ,CAAa;6BAChD,WAAU,IAAI,QAAQ,GAAtB,wBAAsB;wBACN,qBAAM,IAAI,CAAC,4BAA4B,CAAC,GAAG,CAAC,UAAU,CAAC;;wBAAjE,OAAO,GAAG,SAAuD;6BACnE,OAAO,EAAP,wBAAO;wBACD,MAAM,GAAwB;4BAChC,YAAY,EAAE;gCACV,GAAG,EAAE,QAAQ,CAAC,GAAG;6BACpB;4BACD,QAAQ,EAAE,QAAQ,CAAC,KAAK,CAAC,KAAK;4BAC9B,SAAS;4BACT,OAAO,EAAE,CAAC;yBACb,CAAC;wBACa,qBAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;;wBAAlC,MAAM,GAAG,SAAyB;wBACxC,IAAI,MAAM,EAAE;4BACF,IAAI,GAAG,sCAAiB,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;4BAClE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;4BACrB,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;4BACrB,IAAI,CAAC,IAA0B,CAAC,OAAO,GAAG,OAAO,CAAC;yBACtD;;;;;;KAGZ;IAED;;OAEG;IACG,8CAAa,GAAnB;;;;gBACY,IAAI,GAAK,IAAI,CAAC,IAAI,KAAd,CAAe;gBACrB,OAAO,GAAI,IAAI,CAAC,IAA0B,CAAC,OAAO,CAAC;gBACzD,IAAI,sCAAiB,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE;oBAC1C,SAAS,GAAW,IAAI,UAAf,EAAE,IAAI,GAAK,IAAI,KAAT,CAAU;oBACzB,GAAG,GAAqB,IAAI,IAAzB,EAAE,cAAc,GAAK,IAAI,eAAT,CAAU;oBAC/B,aAAW;wBACb,GAAG;wBACH,KAAK,EAAE,cAAc;qBACxB,CAAC;oBACF,IAAI,CAAC,UAAU,CAAC;wBACZ,SAAS,EAAE,SAAS,KAAK,+CAAsB,CAAC,QAAQ,CAAC,CAAC,CAAC,+CAAsB,CAAC,OAAO,CAAC,CAAC,CAAC,+CAAsB,CAAC,QAAQ;wBAC3H,QAAQ;wBACR,UAAU,EAAE,OAAO,CAAC,UAAU;qBACjC,CAAC,CAAC;iBACN;;;;KACJ;IAtDD;QADC,kBAAM,CAAC,oDAA4B,CAAC;kCACY,oDAA4B;gFAAC;IAHrE,sBAAsB;QADlC,sBAAU,EAAE;OACA,sBAAsB,CA2DlC;IAAD,6BAAC;CAAA,CA3D2C,0BAAa,GA2DxD;AA3DY,wDAAsB;;;;;;;;;;;;;;ACxBnC;;;;;;;;;;;;;;kFAckF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAElF,+EAA+B;AAC/B,qGAA+C;AAC/C,+GAA8C;AAC9C,mHAA6C;AAC7C,iIAAiE;AAEjE,0JAAyE;AACzE,2KAAoF;AACpF,uJAAiF;AACjF,4KAAoE;AACpE,0JAAyD;AAGzD;IAA6C,2CAAU;IAKnD,iCACgC,KAAgB,EACH,KAA6B,EAChC,mBAAwC,EAC9C,aAA4B;QAJhE,YAMI,kBAAM,KAAK,EAAE,KAAK,EAAE,mBAAmB,CAAC,SAc3C;QAnB+B,WAAK,GAAL,KAAK,CAAW;QACH,WAAK,GAAL,KAAK,CAAwB;QAChC,yBAAmB,GAAnB,mBAAmB,CAAqB;QAC9C,mBAAa,GAAb,aAAa,CAAe;QAPhE,8DAA8D;QAC3C,WAAK,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAU,CAAC,CAAC,CAAC,GAAG,CAAC,aAAG,IAAI,QAAE,oBAAkB,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,iBAAiB,EAAE,CAAqB,EAAvE,CAAuE,CAAC,CAAC,CAAC;QASxJ,KAAI,CAAC,EAAE,GAAG,yBAAuB,CAAC,SAAS,CAAC;QAC5C,KAAI,CAAC,KAAK,CAAC,KAAK,GAAG,yBAAuB,CAAC,YAAY,CAAC;QACxD,KAAI,CAAC,KAAK,CAAC,OAAO,GAAG,yBAAuB,CAAC,YAAY,CAAC;QAC1D,KAAI,CAAC,QAAQ,CAAC,yBAAuB,CAAC,MAAM,CAAC,yBAAyB,CAAC,CAAC;QACxE,KAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC;QAC3B,KAAI,CAAC,KAAK,CAAC,SAAS,GAAG,eAAe,CAAC;QACvC,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,mBAAS;YACvD,IAAM,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;YAC1B,IAAI,IAAI,EAAE;gBACN,KAAI,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;aAC/B;QACL,CAAC,CAAC,CAAC,CAAC;QACJ,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,UAAU,CAAC,cAAI,IAAI,YAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAArB,CAAqB,CAAC,CAAC,CAAC;;IAC9E,CAAC;gCAzBQ,uBAAuB;IA2BhC;;OAEG;IACG,4CAAU,GAAhB,UAAiB,OAAsC;;;;4BACnD,qBAAM,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC;;wBAApC,SAAoC,CAAC;;;;;KACxC;IAED;;OAEG;IACO,4CAAU,GAApB,UAAqB,IAAc;QAC/B,IAAI,sCAAiB,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;YACjC,OAAO,6BAAK,SAAS,EAAE,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,KAAS,GAAQ,CAAC;SAC/F;QACD,OAAO,SAAS,CAAC;IACrB,CAAC;IAED;;OAEG;IACa,4CAAU,GAA1B,UAA2B,IAAc,EAAE,SAA0B;QAA1B,6CAA0B;;;;;;6BAC7D,sCAAiB,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAA/B,wBAA+B;wBACzB,KAA0B,IAAI,CAAC,IAAI,EAAjC,cAAc,sBAAE,GAAG,UAAe;wBACrB,qBAAM,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,aAAG,CAAC,GAAG,CAAC,EAAE;gCAC7D,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,UAAU;gCACvC,SAAS,EAAE,eAAK,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,cAAc,CAAC,GAAG,CAAC;6BACpE,CAAC;;wBAHI,YAAY,GAAG,SAGnB;wBACF,IAAI,YAAY,CAAC,MAAM,YAAY,mBAAS,EAAE;4BAC1C,YAAY,CAAC,MAAM,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;yBAClD;;;;;;KAER;;IA1DQ,uBAAuB;QADnC,sBAAU,EAAE;QAOJ,6BAAM,CAAC,uBAAS,CAAC;QACjB,6BAAM,CAAC,iDAAsB,CAAC;QAC9B,6BAAM,CAAC,2CAAmB,CAAC;QAC3B,6BAAM,CAAC,8BAAa,CAAC;iDAF0B,iDAAsB,UAEvB,8BAAa;OATvD,uBAAuB,CA4DnC;IAAD,8BAAC;CAAA,CA5D4C,wBAAU,GA4DtD;AA5DY,0DAAuB;AA8DpC,WAAiB,uBAAuB;IAEvB,iCAAS,GAAG,qBAAqB,CAAC;IAClC,oCAAY,GAAG,gBAAgB,CAAC;IAE7C;;OAEG;IACH,IAAiB,MAAM,CAItB;IAJD,WAAiB,MAAM;QAEN,gCAAyB,GAAG,2BAA2B,CAAC;IAEzE,CAAC,EAJgB,MAAM,GAAN,8BAAM,KAAN,8BAAM,QAItB;AACL,CAAC,EAbgB,uBAAuB,GAAvB,+BAAuB,KAAvB,+BAAuB,QAavC;AA3EY,0DAAuB;;;;;;;;;;;;;;AC7BpC;;;;;;;;;;;;;;kFAckF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAElF,qGAAuC;AACvC,8EAA0B;AAC1B,mHAA6C;AAC7C,kIAA4D;AAE5D,8HAA6H;AAE7H,oNAA2I;AAI3I;IAAuC,qCAAQ;IAA/C;;IAsDA,CAAC;0BAtDY,iBAAiB;IAIpB,2CAAe,GAArB,UAAsB,MAAyB;;;;;6BACvC,mBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,EAAjC,wBAAiC;wBACjC,qBAAM,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC;;wBAAjC,SAAiC,CAAC;wBAClC,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;4BAC9B,OAAO,MAAM,CAAC,QAAQ,CAAC;4BACvB,OAAO,MAAM,CAAC,QAAQ,CAAC;4BACvB,sBAAO,EAAE,EAAC;yBACb;wBACD,sBAAO,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAC;4BAEnC,sBAAO,EAAE,EAAC;;;;KACb;IAKD,sBAAc,wCAAS;QAHvB;;WAEG;aACH;YACI,IAAI,mBAAiB,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBAC1C,OAAO,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;aAC9B;YACD,OAAO,SAAS,CAAC;QACrB,CAAC;;;OAAA;IAED;;OAEG;IACa,0CAAc,GAA9B,UAA+B,IAA4B;;;;;;6BACnD,CAAC,IAAI,CAAC,QAAQ,EAAd,wBAAc;wBACR,KAAyB,IAAI,EAA3B,OAAO,eAAE,0BAAS,CAAU;6BAChC,QAAO,IAAI,WAAS,KAAK,SAAS,GAAlC,wBAAkC;wBAC1B,IAAI,GAAK,IAAI,KAAT,CAAU;wBAChB,KAAK,GAAmC;4BAC1C,IAAI;4BACJ,SAAS;4BACT,OAAO,EAAE,CAAC;yBACb,CAAC;wBACmB,qBAAM,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC;;wBAA3C,YAAY,GAAG,SAA4B;wBACjD,IAAI,YAAY,EAAE;4BACd,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;4BACf,KAAK,GAAG,+CAAsB,CAAC,QAAQ,KAAK,WAAS,CAAC,CAAC,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC;4BAC3G,IAAI,KAAK,EAAE;gCACP,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,eAAK,IAAI,0BAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,WAAS,EAAE,KAAK,CAAC,EAAtD,CAAsD,CAAC,CAAC;6BAC9F;iCAAM;gCACH,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;6BACtB;yBACJ;;;;;;KAGZ;;IApDQ,iBAAiB;QAD7B,sBAAU,EAAE;OACA,iBAAiB,CAsD7B;IAAD,wBAAC;CAAA,CAtDsC,eAAQ,GAsD9C;AAtDY,8CAAiB;AAwD9B,WAAiB,iBAAiB;IAY9B,IAAiB,QAAQ,CAkBxB;IAlBD,WAAiB,QAAQ;QAErB,SAAgB,EAAE,CAAC,IAA0B;YACzC,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,WAAW,IAAI,IAAI,EAAE;gBACtC,8DAA8D;gBACtD,8BAAS,CAAmB;gBACpC,OAAO,SAAS,KAAK,+CAAsB,CAAC,QAAQ,IAAI,SAAS,KAAK,+CAAsB,CAAC,OAAO,CAAC;aACxG;YACD,OAAO,KAAK,CAAC;QACjB,CAAC;QAPe,WAAE,KAOjB;QAED,SAAgB,MAAM,CAAC,IAAuB,EAAE,SAAiC;YAC7E,oBACO,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,IACrC,SAAS,eACX;QACN,CAAC;QALe,eAAM,SAKrB;IAEL,CAAC,EAlBgB,QAAQ,GAAR,0BAAQ,KAAR,0BAAQ,QAkBxB;IAOD,IAAiB,IAAI,CAqEpB;IArED,WAAiB,IAAI;QAEjB,SAAgB,EAAE,CAAC,IAA0B;YACzC,IAAI,CAAC,CAAC,IAAI,IAAI,UAAU,IAAI,IAAI,IAAI,MAAM,IAAI,IAAI,EAAE;gBAChD,8DAA8D;gBACxD,aAAkC,EAAhC,sBAAQ,EAAE,cAAsB,CAAC;gBACzC,OAAO,OAAO,QAAQ,KAAK,SAAS,IAAI,CAAC,CAAC,IAAI,CAAC;aAClD;YACD,OAAO,KAAK,CAAC;QACjB,CAAC;QAPe,OAAE,KAOjB;QAED,SAAgB,MAAM,CAAC,IAAuB,EAAE,SAAiC,EAAE,QAAwB;YAAxB,0CAAwB;YACvG,IAAM,KAAK,GAAG,+CAAsB,CAAC,QAAQ,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;YAC3F,IAAI,KAAK,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC3B,2DAA2D;gBAC3D,QAAQ,GAAG,IAAI,CAAC;aACnB;YACD,IAAM,IAAI,GAAG;gBACT,EAAE,EAAE,SAAE,EAAE;gBACR,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,WAAW,EAAE,IAAI,CAAC,MAAM;gBACxB,MAAM,EAAE,SAAS;gBACjB,QAAQ,EAAE,iBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,cAAc,CAAC;gBACxD,QAAQ;gBACR,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,eAAK,IAAI,aAAM,CAAC,KAAK,EAAE,SAAS,EAAE,KAAK,CAAC,EAA/B,CAA+B,CAAC,CAAC,CAAC,CAAC,EAAE;gBAC1E,QAAQ,EAAE,KAAK;gBACf,OAAO,EAAE,IAAI;gBACb,QAAQ,EAAE,KAAK;gBACf,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,cAAc,EAAE,cAAc,CAAC,IAAI,EAAE,SAAS,CAAC;gBAC/C,IAAI;aACP,CAAC;YACF,2FAA2F;YAC3F,IAAI,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;gBACxC,OAAO,IAAI,CAAC,QAAQ,CAAC;aACxB;YACD,OAAO,IAAI,CAAC;QAChB,CAAC;QA1Be,WAAM,SA0BrB;QAED,SAAS,cAAc,CAAC,IAAuB,EAAE,SAAiC;YAC9E,IAAM,eAAe,GAAkC,CAAC;oBACpD,IAAI,EAAE,IAAI,aAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,WAAW;oBACnC,QAAQ,EAAE;wBACN,KAAK,EAAE,oCAAoC;qBAC9C;iBACJ,CAAC,CAAC;YACH,IAAI,IAAI,CAAC,MAAM,EAAE;gBACb,eAAe,CAAC,OAAO,CAAC;oBACpB,IAAI,EAAE,IAAI,CAAC,MAAM;oBACjB,QAAQ,EAAE;wBACN,KAAK,EAAE,uCAAuC;wBAC9C,KAAK,EAAE,QAAQ;qBAClB;iBACJ,CAAC,CAAC;aACN;YACD,IAAM,IAAI,GAAG,MAAG,+CAAsB,CAAC,QAAQ,KAAK,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAE,CAAC;YAC5E,IAAM,KAAK,GAAG,UAAO,+CAAsB,CAAC,QAAQ,KAAK,SAAS,CAAC,CAAC,CAAC,yBAAyB,CAAC,CAAC,CAAC,2BAA2B,OAAG,CAAC;YAChI,OAAO;gBACH,eAAe;gBACf,eAAe,EAAE,CAAC;wBACd,IAAI;wBACJ,QAAQ,EAAE;4BACN,KAAK;4BACL,KAAK,EAAE,MAAM;yBAChB;qBACJ,CAAC;aACL,CAAC;QACN,CAAC;IAEL,CAAC,EArEgB,IAAI,GAAJ,sBAAI,KAAJ,sBAAI,QAqEpB;AAEL,CAAC,EA5GgB,iBAAiB,GAAjB,yBAAiB,KAAjB,yBAAiB,QA4GjC;AApKY,8CAAiB;;;;;;;;;;;;;;AC3B9B;;;;;;;;;;;;;;kFAckF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAElF,qGAAsD;AAEtD,iIAAiE;AAGjE,iJAA4E;AAC5E,0JAAwE;AACxE,2KAA8G;AAC9G,+JAA8D;AAC9D,oLAA2E;AAC3E,oNAA2G;AAG3G;IAA+C,6CAAiD;IAS5F;eACI,kBAAM;YACF,QAAQ,EAAE,mDAAuB,CAAC,SAAS;YAC3C,UAAU,EAAE,mDAAuB,CAAC,YAAY;YAChD,oBAAoB,EAAE;gBAClB,IAAI,EAAE,QAAQ;aACjB;YACD,eAAe,EAAE,qBAAqB,CAAC,WAAW,CAAC,EAAE;YACrD,gBAAgB,EAAE,iBAAiB;SACtC,CAAC;IACN,CAAC;IAEK,4CAAQ,GAAd,UAAe,IAA8C;;;;;4BAC1C,qBAAM,iBAAM,QAAQ,YAAC,IAAI,CAAC;;wBAAnC,MAAM,GAAG,SAA0B;wBACnC,KAA4B,IAAI,CAAC,YAAY,EAA3C,SAAS,iBAAE,UAAU,iBAAuB;wBAC9C,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;wBAC1C,qBAAM,MAAM,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,UAAU,cAAE,SAAS,aAAE,CAAC;;wBAAvE,SAAuE,CAAC;wBACxE,sBAAO,MAAM,EAAC;;;;KACjB;IAED,oDAAgB,GAAhB,UAAiB,QAAyB;QAA1C,iBAUC;QATG,iBAAM,gBAAgB,YAAC,QAAQ,CAAC,CAAC;QACjC,QAAQ,CAAC,eAAe,CAAC,qBAAqB,CAAC,YAAY,EAAE;YACzD,OAAO,EAAE,cAAM,YAAI,CAAC,gCAAgC,CAAC,+CAAsB,CAAC,QAAQ,CAAC,EAAtE,CAAsE;YACrF,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC;SACvC,CAAC,CAAC;QACH,QAAQ,CAAC,eAAe,CAAC,qBAAqB,CAAC,cAAc,EAAE;YAC3D,OAAO,EAAE,cAAM,YAAI,CAAC,gCAAgC,CAAC,+CAAsB,CAAC,OAAO,CAAC,EAArE,CAAqE;YACpF,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC;SACvC,CAAC,CAAC;IACP,CAAC;IAED,iDAAa,GAAb,UAAc,KAAwB;QAClC,iBAAM,aAAa,YAAC,KAAK,CAAC,CAAC;QAC3B,IAAM,QAAQ,YAAO,iCAAmB,GAAE,gBAAgB,EAAC,CAAC;QAC5D,KAAK,CAAC,kBAAkB,CAAC,QAAQ,EAAE;YAC/B,SAAS,EAAE,qBAAqB,CAAC,YAAY,CAAC,EAAE;SACnD,CAAC,CAAC;QACH,KAAK,CAAC,kBAAkB,CAAC,QAAQ,EAAE;YAC/B,SAAS,EAAE,qBAAqB,CAAC,cAAc,CAAC,EAAE;SACrD,CAAC,CAAC;IACP,CAAC;IAED,uDAAmB,GAAnB,UAAoB,WAA+B;QAC/C,iBAAM,mBAAmB,YAAC,WAAW,CAAC,CAAC;QACvC,WAAW,CAAC,kBAAkB,CAAC;YAC3B,OAAO,EAAE,qBAAqB,CAAC,YAAY,CAAC,EAAE;YAC9C,UAAU,EAAE,eAAe;SAC9B,CAAC,CAAC;IACP,CAAC;IAED;;;OAGG;IACa,oEAAgC,GAAhD,UAAiD,SAAiC;;;;;;6BAC1E,IAAI,CAAC,SAAS,EAAE,EAAhB,wBAAgB;wBACR,YAAY,GAAK,IAAI,CAAC,KAAK,aAAf,CAAgB;6BAChC,aAAY,YAAY,mDAAuB,IAAI,sCAAiB,CAAC,QAAQ,CAAC,EAAE,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,GAAzG,wBAAyG;wBACzG,qBAAM,YAAY,CAAC,KAAK,CAAC,aAAa,EAAE;;wBAAxC,SAAwC,CAAC;;4BAEzC,qBAAM,IAAI,CAAC,QAAQ,CAAC;4BAChB,MAAM,EAAE,KAAK;4BACb,QAAQ,EAAE,IAAI;4BACd,SAAS;yBACZ,CAAC;;wBAJF,SAIE,CAAC;;;;;;KAGd;IAED;;OAEG;IACO,6CAAS,GAAnB,UAAoB,UAA6D;QAA7D,0CAAiC,IAAI,CAAC,YAAY,CAAC,UAAU;QAC7E,OAAO,CAAC,CAAC,UAAU,IAAI,IAAI,CAAC,KAAK,CAAC,YAAY,YAAY,mDAAuB,CAAC;IACtF,CAAC;IAED;;OAEG;IACO,gDAAY,GAAtB,UAAuB,IAA8C;QACjE,OAAO,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,+CAAsB,CAAC,QAAQ,CAAC;IACzF,CAAC;IAvFD;QAFC,kBAAM,CAAC,6BAAY,CAAC;QACpB,iBAAK,CAAC,6BAAY,CAAC,OAAO,CAAC;kCACK,6BAAY;mEAAC;IAG9C;QADC,kBAAM,CAAC,wBAAgB,CAAC;kCACC,wBAAgB;4DAAC;IAPlC,yBAAyB;QADrC,sBAAU,EAAE;;OACA,yBAAyB,CA6FrC;IAAD,gCAAC;CAAA,CA7F8C,4CAAwB,GA6FtE;AA7FY,8DAAyB;AAwGtC,IAAiB,qBAAqB,CAgBrC;AAhBD,WAAiB,qBAAqB;IAErB,iCAAW,GAAY;QAChC,EAAE,EAAE,sBAAsB;KAC7B,CAAC;IAEW,kCAAY,GAAY;QACjC,EAAE,EAAE,4BAA4B;QAChC,KAAK,EAAE,mBAAmB;KAC7B,CAAC;IAEW,oCAAc,GAAY;QACnC,EAAE,EAAE,8BAA8B;QAClC,KAAK,EAAE,qBAAqB;KAC/B,CAAC;AAEN,CAAC,EAhBgB,qBAAqB,GAArB,6BAAqB,KAArB,6BAAqB,QAgBrC;;;;;;;;;;;;;;;ACrJD;;;;;;;;;;;;;;kFAckF;AAClF,qGAA4C;AAC5C,sJAAuE;AACvE,2KAAuF;AACvF,8JAAuE;AACvE,6KAAyE;AACzE,oLAA2E;AAC3E,6LAAgF;AAEhF,iIAA2C;AAE3C,kBAAe,IAAI,2BAAe,CAAC,cAAI;IACnC,IAAI,CAAC,oDAA4B,CAAC,CAAC,MAAM,EAAE,CAAC,gBAAgB,EAAE,CAAC;IAC/D,wCAAoB,CAAC,IAAI,EAAE,sDAAyB,CAAC,CAAC;IACtD,IAAI,CAAC,8BAAa,CAAC,CAAC,cAAc,CAAC,iBAAO,IAAI,QAAC;QAC3C,EAAE,EAAE,mDAAuB,CAAC,SAAS;QACrC,YAAY,EAAE,cAAM,+DAAyB,CAAC,OAAO,CAAC,SAAS,CAAC,EAA5C,CAA4C;KACnE,CAAC,EAH4C,CAG5C,CAAC,CAAC;AACR,CAAC,CAAC,CAAC;;;;;;;;;;;;;;AChCH;;;;;;;;;;;;;;kFAckF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAElF,qGAA+C;AAE/C,8LAA+F;AAC/F,oNAO2E;AAG3E;IAAA;IAkBA,CAAC;IAbS,0CAAG,GAAT,UAAU,UAA8B;;;;;;6BAChC,UAAU,EAAV,wBAAU;wBACK,qBAAM,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,UAAU,CAAC;;wBAAhE,MAAM,GAAG,SAAuD;wBACtE,IAAI,MAAM,IAAI,MAAM,CAAC,gBAAgB,EAAE;4BAC3B,qBAAqB,GAAK,MAAM,CAAC,gBAAgB,CAAC,YAA+C,sBAA5E,CAA6E;4BAC1G,IAAI,CAAC,CAAC,qBAAqB,EAAE;gCACzB,sBAAO,IAAI,oBAAoB,CAAC,MAAM,EAAE,UAAU,CAAC,EAAC;6BACvD;yBACJ;;4BAEL,sBAAO,SAAS,EAAC;;;;KACpB;IAbD;QADC,kBAAM,CAAC,iDAAsB,CAAC;;wEAC2B;IAHjD,4BAA4B;QADxC,sBAAU,EAAE;OACA,4BAA4B,CAkBxC;IAAD,mCAAC;CAAA;AAlBY,oEAA4B;AAoBzC;IAEI,8BAA+B,MAAuB,EAAW,UAAkB;QAApD,WAAM,GAAN,MAAM,CAAiB;QAAW,eAAU,GAAV,UAAU,CAAQ;IACnF,CAAC;IAED;;OAEG;IACG,kCAAG,GAAT,UAAU,MAA2B;;;;;4BACpB,qBAAM,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,6CAAoB,CAAC,IAAI,EAAE,MAAM,CAAC;;wBAAvE,IAAI,GAAG,SAAgE;wBAC7E,sBAAO,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,EAAC;;;;KAClC;IAED;;OAEG;IACG,sCAAO,GAAb,UAAc,MAAsC;;;;;4BACnC,qBAAM,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,oDAA2B,CAAC,IAAI,EAAE,MAAM,CAAC;;wBAA9E,IAAI,GAAG,SAAuE;wBACpF,sBAAO,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,EAAC;;;;KAClC;IAEL,2BAAC;AAAD,CAAC;AArBY,oDAAoB;;;;;;;;;;;;;AChDjC,cAAc,mBAAO,CAAC,oJAAkD;;AAExE,4CAA4C,QAAS;;AAErD;AACA;;;;AAIA,eAAe;;AAEf;AACA;;AAEA,aAAa,mBAAO,CAAC,mGAA+C;;AAEpE;;AAEA,GAAG,KAAU,EAAE,E;;;;;;;;;;;ACnBf,2BAA2B,mBAAO,CAAC,6FAA2C;AAC9E;;;AAGA;AACA,cAAc,QAAS,y2BAAy2B,4CAA4C,GAAG,sDAAsD,oCAAoC,GAAG,sDAAsD,oCAAoC,mCAAmC,GAAG;;AAE5oC","file":"69.bundle.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2019 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { interfaces, Container } from 'inversify';\nimport { createTreeContainer, Tree, TreeImpl, TreeModel, TreeModelImpl, TreeWidget } from '@theia/core/lib/browser/tree';\nimport { TypeHierarchyTree } from './typehierarchy-tree';\nimport { TypeHierarchyTreeModel } from './typehierarchy-tree-model';\nimport { TypeHierarchyTreeWidget } from './typehierarchy-tree-widget';\n\nfunction createHierarchyTreeContainer(parent: interfaces.Container): Container {\n    const child = createTreeContainer(parent);\n\n    child.unbind(TreeImpl);\n    child.bind(TypeHierarchyTree).toSelf();\n    child.rebind(Tree).toService(TypeHierarchyTree);\n\n    child.unbind(TreeModelImpl);\n    child.bind(TypeHierarchyTreeModel).toSelf();\n    child.rebind(TreeModel).toService(TypeHierarchyTreeModel);\n\n    child.bind(TypeHierarchyTreeWidget).toSelf();\n    child.rebind(TreeWidget).toService(TypeHierarchyTreeWidget);\n\n    return child;\n}\n\nexport function createHierarchyTreeWidget(parent: interfaces.Container): TypeHierarchyTreeWidget {\n    return createHierarchyTreeContainer(parent).get(TypeHierarchyTreeWidget);\n}\n","/********************************************************************************\n * Copyright (C) 2019 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { inject, injectable } from 'inversify';\nimport { TreeNode } from '@theia/core/lib/browser/tree/tree';\nimport { TreeModelImpl } from '@theia/core/lib/browser/tree/tree-model';\nimport { TypeHierarchyDirection, TypeHierarchyParams } from '@theia/languages/lib/browser/typehierarchy/typehierarchy-protocol';\nimport { TypeHierarchyServiceProvider } from '../typehierarchy-service';\nimport { TypeHierarchyTree } from './typehierarchy-tree';\n\n@injectable()\nexport class TypeHierarchyTreeModel extends TreeModelImpl {\n\n    @inject(TypeHierarchyServiceProvider)\n    protected readonly typeHierarchyServiceProvider: TypeHierarchyServiceProvider;\n\n    protected doOpenNode(node: TreeNode): void {\n        // do nothing (in particular do not expand the node)\n    }\n\n    /**\n     * Initializes the tree by calculating and setting a new tree root node.\n     */\n    async initialize(options: TypeHierarchyTree.InitOptions): Promise<void> {\n        this.tree.root = undefined;\n        (this.tree as TypeHierarchyTree).service = undefined;\n        const { location, languageId, direction } = options;\n        if (languageId && location) {\n            const service = await this.typeHierarchyServiceProvider.get(languageId);\n            if (service) {\n                const params: TypeHierarchyParams = {\n                    textDocument: {\n                        uri: location.uri\n                    },\n                    position: location.range.start,\n                    direction,\n                    resolve: 1\n                };\n                const symbol = await service.get(params);\n                if (symbol) {\n                    const root = TypeHierarchyTree.RootNode.create(symbol, direction);\n                    root.expanded = true;\n                    this.tree.root = root;\n                    (this.tree as TypeHierarchyTree).service = service;\n                }\n            }\n        }\n    }\n\n    /**\n     * If the tree root is set, it resets it with the inverse type hierarchy direction.\n     */\n    async flipDirection(): Promise<void> {\n        const { root } = this.tree;\n        const service = (this.tree as TypeHierarchyTree).service;\n        if (TypeHierarchyTree.RootNode.is(root) && !!service) {\n            const { direction, item } = root;\n            const { uri, selectionRange } = item;\n            const location = {\n                uri,\n                range: selectionRange\n            };\n            this.initialize({\n                direction: direction === TypeHierarchyDirection.Children ? TypeHierarchyDirection.Parents : TypeHierarchyDirection.Children,\n                location,\n                languageId: service.languageId\n            });\n        }\n    }\n\n}\n","/********************************************************************************\n * Copyright (C) 2019 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport * as React from 'react';\nimport { inject, injectable } from 'inversify';\nimport { DockPanel } from '@phosphor/widgets';\nimport URI from '@theia/core/lib/common/uri';\nimport { SymbolKind, Range } from '@theia/languages/lib/browser';\nimport { TreeNode } from '@theia/core/lib/browser/tree/tree';\nimport { EditorManager } from '@theia/editor/lib/browser/editor-manager';\nimport { ContextMenuRenderer } from '@theia/core/lib/browser/context-menu-renderer';\nimport { TreeWidget, TreeProps } from '@theia/core/lib/browser/tree/tree-widget';\nimport { TypeHierarchyTreeModel } from './typehierarchy-tree-model';\nimport { TypeHierarchyTree } from './typehierarchy-tree';\n\n@injectable()\nexport class TypeHierarchyTreeWidget extends TreeWidget {\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    protected readonly icons = new Map(Array.from(Object.keys(SymbolKind)).map(key => [(SymbolKind as any)[key], key.toLocaleLowerCase()] as [number, string]));\n\n    constructor(\n        @inject(TreeProps) readonly props: TreeProps,\n        @inject(TypeHierarchyTreeModel) readonly model: TypeHierarchyTreeModel,\n        @inject(ContextMenuRenderer) readonly contextMenuRenderer: ContextMenuRenderer,\n        @inject(EditorManager) readonly editorManager: EditorManager\n    ) {\n        super(props, model, contextMenuRenderer);\n        this.id = TypeHierarchyTreeWidget.WIDGET_ID;\n        this.title.label = TypeHierarchyTreeWidget.WIDGET_LABEL;\n        this.title.caption = TypeHierarchyTreeWidget.WIDGET_LABEL;\n        this.addClass(TypeHierarchyTreeWidget.Styles.TYPE_HIERARCHY_TREE_CLASS);\n        this.title.closable = true;\n        this.title.iconClass = 'fa fa-sitemap';\n        this.toDispose.push(this.model.onSelectionChanged(selection => {\n            const node = selection[0];\n            if (node) {\n                this.openEditor(node, true);\n            }\n        }));\n        this.toDispose.push(this.model.onOpenNode(node => this.openEditor(node)));\n    }\n\n    /**\n     * Initializes the widget with the new input.\n     */\n    async initialize(options: TypeHierarchyTree.InitOptions): Promise<void> {\n        await this.model.initialize(options);\n    }\n\n    /**\n     * See: `TreeWidget#renderIcon`.\n     */\n    protected renderIcon(node: TreeNode): React.ReactNode {\n        if (TypeHierarchyTree.Node.is(node)) {\n            return <div className={'symbol-icon ' + this.icons.get(node.item.kind) || 'unknown'}></div>;\n        }\n        return undefined;\n    }\n\n    /**\n     * Opens up the node in the editor. On demand (`keepFocus`) it reveals the location in the editor.\n     */\n    protected async openEditor(node: TreeNode, keepFocus: boolean = false): Promise<void> {\n        if (TypeHierarchyTree.Node.is(node)) {\n            const { selectionRange, uri } = node.item;\n            const editorWidget = await this.editorManager.open(new URI(uri), {\n                mode: keepFocus ? 'reveal' : 'activate',\n                selection: Range.create(selectionRange.start, selectionRange.end)\n            });\n            if (editorWidget.parent instanceof DockPanel) {\n                editorWidget.parent.selectWidget(editorWidget);\n            }\n        }\n    }\n\n}\n\nexport namespace TypeHierarchyTreeWidget {\n\n    export const WIDGET_ID = 'theia-typehierarchy';\n    export const WIDGET_LABEL = 'Type Hierarchy';\n\n    /**\n     * CSS styles for the `Type Hierarchy` widget.\n     */\n    export namespace Styles {\n\n        export const TYPE_HIERARCHY_TREE_CLASS = 'theia-type-hierarchy-tree';\n\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2019 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable } from 'inversify';\nimport { v4 } from 'uuid';\nimport URI from '@theia/core/lib/common/uri';\nimport { Location } from '@theia/editor/lib/browser/editor';\nimport { TreeDecoration, DecoratedTreeNode } from '@theia/core/lib/browser/tree/tree-decorator';\nimport { TreeImpl, TreeNode, CompositeTreeNode, ExpandableTreeNode, SelectableTreeNode } from '@theia/core/lib/browser/tree';\nimport { TypeHierarchyItem } from '@theia/languages/lib/browser/typehierarchy/typehierarchy-protocol';\nimport { TypeHierarchyDirection, ResolveTypeHierarchyItemParams } from '@theia/languages/lib/browser/typehierarchy/typehierarchy-protocol';\nimport { TypeHierarchyService } from '../typehierarchy-service';\n\n@injectable()\nexport class TypeHierarchyTree extends TreeImpl {\n\n    service: TypeHierarchyService | undefined;\n\n    async resolveChildren(parent: CompositeTreeNode): Promise<TreeNode[]> {\n        if (TypeHierarchyTree.Node.is(parent)) {\n            await this.ensureResolved(parent);\n            if (parent.children.length === 0) {\n                delete parent.children;\n                delete parent.expanded;\n                return [];\n            }\n            return parent.children.slice();\n        }\n        return [];\n    }\n\n    /**\n     * Returns with the direction of the type hierarchy attached to the root node. `undefined` if the root is not set.\n     */\n    protected get direction(): TypeHierarchyDirection | undefined {\n        if (TypeHierarchyTree.RootNode.is(this.root)) {\n            return this.root.direction;\n        }\n        return undefined;\n    }\n\n    /**\n     * Makes sure, the node and its children are resolved. Resolves it on demand.\n     */\n    protected async ensureResolved(node: TypeHierarchyTree.Node): Promise<void> {\n        if (!node.resolved) {\n            const { service, direction } = this;\n            if (service && direction !== undefined) {\n                const { item } = node;\n                const param: ResolveTypeHierarchyItemParams = {\n                    item,\n                    direction,\n                    resolve: 1\n                };\n                const resolvedItem = await service.resolve(param);\n                if (resolvedItem) {\n                    node.resolved = true;\n                    const items = TypeHierarchyDirection.Children === direction ? resolvedItem.children : resolvedItem.parents;\n                    if (items) {\n                        node.children = items.map(child => TypeHierarchyTree.Node.create(child, direction, false));\n                    } else {\n                        node.children = [];\n                    }\n                }\n            }\n        }\n    }\n\n}\n\nexport namespace TypeHierarchyTree {\n\n    export interface InitOptions {\n        readonly direction: TypeHierarchyDirection;\n        readonly location: Location | undefined;\n        readonly languageId: string | undefined;\n    }\n\n    export interface RootNode extends Node {\n        readonly direction: TypeHierarchyDirection;\n    }\n\n    export namespace RootNode {\n\n        export function is(node: TreeNode | undefined): node is RootNode {\n            if (Node.is(node) && 'direction' in node) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                const { direction } = (node as any);\n                return direction === TypeHierarchyDirection.Children || direction === TypeHierarchyDirection.Parents;\n            }\n            return false;\n        }\n\n        export function create(item: TypeHierarchyItem, direction: TypeHierarchyDirection): RootNode {\n            return {\n                ...Node.create(item, direction, true),\n                direction\n            };\n        }\n\n    }\n\n    export interface Node extends CompositeTreeNode, ExpandableTreeNode, SelectableTreeNode, DecoratedTreeNode {\n        readonly item: TypeHierarchyItem;\n        resolved: boolean;\n    }\n\n    export namespace Node {\n\n        export function is(node: TreeNode | undefined): node is Node {\n            if (!!node && 'resolved' in node && 'item' in node) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                const { resolved, item } = (node as any);\n                return typeof resolved === 'boolean' && !!item;\n            }\n            return false;\n        }\n\n        export function create(item: TypeHierarchyItem, direction: TypeHierarchyDirection, resolved: boolean = true): Node {\n            const items = TypeHierarchyDirection.Children === direction ? item.children : item.parents;\n            if (items && items.length > 0) {\n                // If the server sent more levels than requested, use them.\n                resolved = true;\n            }\n            const node = {\n                id: v4(),\n                name: item.name,\n                description: item.detail,\n                parent: undefined,\n                location: Location.create(item.uri, item.selectionRange),\n                resolved,\n                children: items ? items.map(child => create(child, direction, false)) : [],\n                expanded: false,\n                visible: true,\n                selected: false,\n                kind: item.kind,\n                decorationData: decorationData(item, direction),\n                item\n            };\n            // Trick: if the node is `resolved` and have zero `children`, make the node non-expandable.\n            if (resolved && node.children.length === 0) {\n                delete node.expanded;\n            }\n            return node;\n        }\n\n        function decorationData(item: TypeHierarchyItem, direction: TypeHierarchyDirection): TreeDecoration.Data {\n            const captionSuffixes: TreeDecoration.CaptionAffix[] = [{\n                data: new URI(item.uri).displayName,\n                fontData: {\n                    color: 'var(--theia-descriptionForeground)',\n                }\n            }];\n            if (item.detail) {\n                captionSuffixes.unshift({\n                    data: item.detail,\n                    fontData: {\n                        color: 'var(--theia-list-highlightForeground)',\n                        style: 'italic'\n                    }\n                });\n            }\n            const data = `${TypeHierarchyDirection.Children === direction ? '▼' : '▲'}`;\n            const color = `var(${TypeHierarchyDirection.Children === direction ? '--theia-errorForeground' : '--theia-successBackground'})`;\n            return {\n                captionSuffixes,\n                captionPrefixes: [{\n                    data,\n                    fontData: {\n                        color,\n                        style: 'bold'\n                    }\n                }]\n            };\n        }\n\n    }\n\n}\n","/********************************************************************************\n * Copyright (C) 2019 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable, inject, named } from 'inversify';\nimport { MenuModelRegistry } from '@theia/core/lib/common/menu';\nimport { ApplicationShell } from '@theia/core/lib/browser/shell';\nimport { KeybindingRegistry } from '@theia/core/lib/browser/keybinding';\nimport { Command, CommandRegistry } from '@theia/core/lib/common/command';\nimport { EDITOR_CONTEXT_MENU } from '@theia/editor/lib/browser/editor-menu';\nimport { EditorAccess } from '@theia/editor/lib/browser/editor-manager';\nimport { AbstractViewContribution, OpenViewArguments } from '@theia/core/lib/browser/shell/view-contribution';\nimport { TypeHierarchyTree } from './tree/typehierarchy-tree';\nimport { TypeHierarchyTreeWidget } from './tree/typehierarchy-tree-widget';\nimport { TypeHierarchyDirection } from '@theia/languages/lib/browser/typehierarchy/typehierarchy-protocol';\n\n@injectable()\nexport class TypeHierarchyContribution extends AbstractViewContribution<TypeHierarchyTreeWidget> {\n\n    @inject(EditorAccess)\n    @named(EditorAccess.CURRENT)\n    protected readonly editorAccess: EditorAccess;\n\n    @inject(ApplicationShell)\n    protected readonly shell: ApplicationShell;\n\n    constructor() {\n        super({\n            widgetId: TypeHierarchyTreeWidget.WIDGET_ID,\n            widgetName: TypeHierarchyTreeWidget.WIDGET_LABEL,\n            defaultWidgetOptions: {\n                area: 'bottom'\n            },\n            toggleCommandId: TypeHierarchyCommands.TOGGLE_VIEW.id,\n            toggleKeybinding: 'ctrlcmd+shift+h'\n        });\n    }\n\n    async openView(args?: Partial<TypeHierarchyOpenViewArguments>): Promise<TypeHierarchyTreeWidget> {\n        const widget = await super.openView(args);\n        const { selection, languageId } = this.editorAccess;\n        const direction = this.getDirection(args);\n        await widget.initialize({ location: selection, languageId, direction });\n        return widget;\n    }\n\n    registerCommands(commands: CommandRegistry): void {\n        super.registerCommands(commands);\n        commands.registerCommand(TypeHierarchyCommands.OPEN_SUBTYPE, {\n            execute: () => this.openViewOrFlipHierarchyDirection(TypeHierarchyDirection.Children),\n            isEnabled: this.isEnabled.bind(this)\n        });\n        commands.registerCommand(TypeHierarchyCommands.OPEN_SUPERTYPE, {\n            execute: () => this.openViewOrFlipHierarchyDirection(TypeHierarchyDirection.Parents),\n            isEnabled: this.isEnabled.bind(this)\n        });\n    }\n\n    registerMenus(menus: MenuModelRegistry): void {\n        super.registerMenus(menus);\n        const menuPath = [...EDITOR_CONTEXT_MENU, 'type-hierarchy'];\n        menus.registerMenuAction(menuPath, {\n            commandId: TypeHierarchyCommands.OPEN_SUBTYPE.id\n        });\n        menus.registerMenuAction(menuPath, {\n            commandId: TypeHierarchyCommands.OPEN_SUPERTYPE.id\n        });\n    }\n\n    registerKeybindings(keybindings: KeybindingRegistry): void {\n        super.registerKeybindings(keybindings);\n        keybindings.registerKeybinding({\n            command: TypeHierarchyCommands.OPEN_SUBTYPE.id,\n            keybinding: 'ctrlcmd+alt+h'\n        });\n    }\n\n    /**\n     * Flips the hierarchy direction in the `Type Hierarchy` view, if it is active and has a valid root.\n     * Otherwise, calculates the type hierarchy based on the selection of the current editor.\n     */\n    protected async openViewOrFlipHierarchyDirection(direction: TypeHierarchyDirection): Promise<void> {\n        if (this.isEnabled()) {\n            const { activeWidget } = this.shell;\n            if (activeWidget instanceof TypeHierarchyTreeWidget && TypeHierarchyTree.RootNode.is(activeWidget.model.root)) {\n                await activeWidget.model.flipDirection();\n            } else {\n                await this.openView({\n                    toggle: false,\n                    activate: true,\n                    direction\n                });\n            }\n        }\n    }\n\n    /**\n     * Enabled if the `current` editor has the `languageId` or the `Type Hierarchy` widget is the active one.\n     */\n    protected isEnabled(languageId: string | undefined = this.editorAccess.languageId): boolean {\n        return !!languageId || this.shell.activeWidget instanceof TypeHierarchyTreeWidget;\n    }\n\n    /**\n     * Extracts the type hierarchy direction from the argument. If the direction cannot be extracted, returns with the `Children` as the default type.\n     */\n    protected getDirection(args?: Partial<TypeHierarchyOpenViewArguments>): TypeHierarchyDirection {\n        return !!args && !!args.direction ? args.direction : TypeHierarchyDirection.Children;\n    }\n\n}\n\nexport interface TypeHierarchyOpenViewArguments extends OpenViewArguments {\n\n    /**\n     * The type hierarchy direction for the view argument.\n     */\n    readonly direction: TypeHierarchyDirection;\n\n}\n\nexport namespace TypeHierarchyCommands {\n\n    export const TOGGLE_VIEW: Command = {\n        id: 'typehierarchy:toggle'\n    };\n\n    export const OPEN_SUBTYPE: Command = {\n        id: 'typehierarchy:open-subtype',\n        label: 'Subtype Hierarchy'\n    };\n\n    export const OPEN_SUPERTYPE: Command = {\n        id: 'typehierarchy:open-supertype',\n        label: 'Supertype Hierarchy'\n    };\n\n}\n","/********************************************************************************\n * Copyright (C) 2019 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\nimport { ContainerModule } from 'inversify';\nimport { WidgetFactory } from '@theia/core/lib/browser/widget-manager';\nimport { bindViewContribution } from '@theia/core/lib/browser/shell/view-contribution';\nimport { TypeHierarchyServiceProvider } from './typehierarchy-service';\nimport { TypeHierarchyContribution } from './typehierarchy-contribution';\nimport { TypeHierarchyTreeWidget } from './tree/typehierarchy-tree-widget';\nimport { createHierarchyTreeWidget } from './tree/typehierarchy-tree-container';\n\nimport '../../src/browser/style/index.css';\n\nexport default new ContainerModule(bind => {\n    bind(TypeHierarchyServiceProvider).toSelf().inSingletonScope();\n    bindViewContribution(bind, TypeHierarchyContribution);\n    bind(WidgetFactory).toDynamicValue(context => ({\n        id: TypeHierarchyTreeWidget.WIDGET_ID,\n        createWidget: () => createHierarchyTreeWidget(context.container)\n    }));\n});\n","/********************************************************************************\n * Copyright (C) 2019 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable, inject } from 'inversify';\nimport { ILanguageClient } from '@theia/languages/lib/browser';\nimport { LanguageClientProvider } from '@theia/languages/lib/browser/language-client-provider';\nimport {\n    TypeHierarchyItem,\n    TypeHierarchyParams,\n    TypeHierarchyRequest,\n    ResolveTypeHierarchyRequest,\n    TypeHierarchyServerCapabilities,\n    ResolveTypeHierarchyItemParams\n} from '@theia/languages/lib/browser/typehierarchy/typehierarchy-protocol';\n\n@injectable()\nexport class TypeHierarchyServiceProvider {\n\n    @inject(LanguageClientProvider)\n    protected readonly clientProvider: LanguageClientProvider;\n\n    async get(languageId: string | undefined): Promise<TypeHierarchyService | undefined> {\n        if (languageId) {\n            const client = await this.clientProvider.getLanguageClient(languageId);\n            if (client && client.initializeResult) {\n                const { typeHierarchyProvider } = client.initializeResult.capabilities as TypeHierarchyServerCapabilities;\n                if (!!typeHierarchyProvider) {\n                    return new TypeHierarchyService(client, languageId);\n                }\n            }\n        }\n        return undefined;\n    }\n\n}\n\nexport class TypeHierarchyService {\n\n    constructor(protected readonly client: ILanguageClient, readonly languageId: string) {\n    }\n\n    /**\n     * Performs the `textDocument/typeHierarchy` LS method invocations.\n     */\n    async get(params: TypeHierarchyParams): Promise<TypeHierarchyItem | undefined> {\n        const item = await this.client.sendRequest(TypeHierarchyRequest.type, params);\n        return item ? item : undefined;\n    }\n\n    /**\n     * Performs the `typeHierarchy/resolve` LS method call.\n     */\n    async resolve(params: ResolveTypeHierarchyItemParams): Promise<TypeHierarchyItem | undefined> {\n        const item = await this.client.sendRequest(ResolveTypeHierarchyRequest.type, params);\n        return item ? item : undefined;\n    }\n\n}\n","\nvar content = require(\"!!../../../../../css-loader/index.js!./index.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../../style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../css-loader/index.js!./index.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../css-loader/index.js!./index.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../../../../css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"/********************************************************************************\\n * Copyright (C) 2019 TypeFox and others.\\n *\\n * This program and the accompanying materials are made available under the\\n * terms of the Eclipse Public License v. 2.0 which is available at\\n * http://www.eclipse.org/legal/epl-2.0.\\n *\\n * This Source Code may also be made available under the following Secondary\\n * Licenses when the conditions for such availability set forth in the Eclipse\\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\\n * with the GNU Classpath Exception which is available at\\n * https://www.gnu.org/software/classpath/license.html.\\n *\\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\\n ********************************************************************************/\\n\\n.theia-type-hierarchy-tree {\\n    font-size: var(--theia-ui-font-size0);\\n}\\n\\n.theia-type-hierarchy-tree .theia-caption-suffix {\\n    padding-left: 10px !important;\\n}\\n\\n.theia-type-hierarchy-tree .theia-caption-prefix {\\n    padding-right: 5px !important;\\n    padding-left: 1px !important;\\n}\\n\", \"\"]);\n\n// exports\n"],"sourceRoot":""}