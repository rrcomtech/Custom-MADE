{"version":3,"sources":["webpack:///../node_modules/@theia/monaco/src/browser/monaco-languages.ts"],"names":[],"mappings":"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","file":"37.bundle.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable, inject, decorate } from 'inversify';\nimport {\n    MonacoLanguages as BaseMonacoLanguages, ProtocolToMonacoConverter,\n    MonacoToProtocolConverter,\n    DocumentSelector,\n    SignatureHelpProvider,\n    MonacoModelIdentifier,\n    CodeActionProvider,\n    CodeLensProvider\n} from 'monaco-languageclient';\nimport { Languages, Diagnostic, DiagnosticCollection, Language, WorkspaceSymbolProvider } from '@theia/languages/lib/browser';\nimport { ProblemManager } from '@theia/markers/lib/browser/problem/problem-manager';\nimport URI from '@theia/core/lib/common/uri';\nimport { Mutable } from '@theia/core/lib/common/types';\nimport { Disposable } from '@theia/core/lib/common/disposable';\nimport { MonacoDiagnosticCollection } from 'monaco-languageclient/lib/monaco-diagnostic-collection';\n\ndecorate(injectable(), BaseMonacoLanguages);\ndecorate(inject(ProtocolToMonacoConverter), BaseMonacoLanguages, 0);\ndecorate(inject(MonacoToProtocolConverter), BaseMonacoLanguages, 1);\n\n@injectable()\nexport class MonacoLanguages extends BaseMonacoLanguages implements Languages {\n\n    readonly workspaceSymbolProviders: WorkspaceSymbolProvider[] = [];\n\n    protected readonly makers = new Map<string, MonacoDiagnosticCollection>();\n\n    constructor( // eslint-disable-next-line @typescript-eslint/indent\n        @inject(ProtocolToMonacoConverter) p2m: ProtocolToMonacoConverter,\n        @inject(MonacoToProtocolConverter) m2p: MonacoToProtocolConverter,\n        @inject(ProblemManager) protected readonly problemManager: ProblemManager\n    ) {\n        super(p2m, m2p);\n        for (const uri of this.problemManager.getUris()) {\n            this.updateMarkers(new URI(uri));\n        }\n        this.problemManager.onDidChangeMarkers(uri => this.updateMarkers(uri));\n    }\n\n    protected updateMarkers(uri: URI): void {\n        const uriString = uri.toString();\n        const owners = new Map<string, Diagnostic[]>();\n        for (const marker of this.problemManager.findMarkers({ uri })) {\n            const diagnostics = owners.get(marker.owner) || [];\n            diagnostics.push(marker.data);\n            owners.set(marker.owner, diagnostics);\n        }\n        const toClean = new Set<string>(this.makers.keys());\n        for (const [owner, diagnostics] of owners) {\n            toClean.delete(owner);\n            const collection = this.makers.get(owner) || new MonacoDiagnosticCollection(owner, this.p2m);\n            collection.set(uriString, diagnostics);\n            this.makers.set(owner, collection);\n        }\n        for (const owner of toClean) {\n            const collection = this.makers.get(owner);\n            if (collection) {\n                collection.set(uriString, []);\n            }\n        }\n    }\n\n    createDiagnosticCollection(name?: string): DiagnosticCollection {\n        const owner = name || 'default';\n        const uris: string[] = [];\n        return {\n            set: (uri, diagnostics) => {\n                this.problemManager.setMarkers(new URI(uri), owner, diagnostics);\n                uris.push(uri);\n            },\n            dispose: () => {\n                for (const uri of uris) {\n                    this.problemManager.setMarkers(new URI(uri), owner, []);\n                }\n            }\n        };\n    }\n\n    registerWorkspaceSymbolProvider(provider: WorkspaceSymbolProvider): Disposable {\n        this.workspaceSymbolProviders.push(provider);\n        return Disposable.create(() => {\n            const index = this.workspaceSymbolProviders.indexOf(provider);\n            if (index !== -1) {\n                this.workspaceSymbolProviders.splice(index, 1);\n            }\n        });\n    }\n\n    get languages(): Language[] {\n        return [...this.mergeLanguages(monaco.languages.getLanguages()).values()];\n    }\n\n    getLanguage(languageId: string): Language | undefined {\n        return this.mergeLanguages(monaco.languages.getLanguages().filter(language => language.id === languageId)).get(languageId);\n    }\n\n    protected mergeLanguages(registered: monaco.languages.ILanguageExtensionPoint[]): Map<string, Mutable<Language>> {\n        const languages = new Map<string, Mutable<Language>>();\n        for (const { id, aliases, extensions, filenames } of registered) {\n            const merged = languages.get(id) || {\n                id,\n                name: '',\n                extensions: new Set(),\n                filenames: new Set()\n            };\n            if (!merged.name && aliases && aliases.length) {\n                merged.name = aliases[0];\n            }\n            if (extensions && extensions.length) {\n                for (const extension of extensions) {\n                    merged.extensions.add(extension);\n                }\n            }\n            if (filenames && filenames.length) {\n                for (const filename of filenames) {\n                    merged.filenames.add(filename);\n                }\n            }\n            languages.set(id, merged);\n        }\n        for (const [id, language] of languages) {\n            if (!language.name) {\n                language.name = id;\n            }\n        }\n        return languages;\n    }\n\n    protected createSignatureHelpProvider(selector: DocumentSelector, provider: SignatureHelpProvider, ...triggerCharacters: string[]): monaco.languages.SignatureHelpProvider {\n        const signatureHelpTriggerCharacters = [...(provider.triggerCharacters || triggerCharacters || [])];\n        const signatureHelpRetriggerCharacters = [...(provider.retriggerCharacters || [])];\n        return {\n            signatureHelpTriggerCharacters,\n            signatureHelpRetriggerCharacters,\n            provideSignatureHelp: async (model, position, token) => {\n                if (!this.matchModel(selector, MonacoModelIdentifier.fromModel(model))) {\n                    return undefined;\n                }\n                const params = this.m2p.asTextDocumentPositionParams(model, position);\n                const help = await provider.provideSignatureHelp(params, token, undefined! /* not used by LC */);\n                if (!help) {\n                    return undefined;\n                }\n                return {\n                    value: this.p2m.asSignatureHelp(help),\n                    dispose: () => { }\n                };\n            }\n        };\n    }\n\n    protected createCodeActionProvider(selector: DocumentSelector, provider: CodeActionProvider): monaco.languages.CodeActionProvider {\n        return {\n            provideCodeActions: async (model, range, context, token) => {\n                if (!this.matchModel(selector, MonacoModelIdentifier.fromModel(model))) {\n                    return undefined!;\n                }\n                const params = this.m2p.asCodeActionParams(model, range, context);\n                const actions = await provider.provideCodeActions(params, token);\n                if (!actions) {\n                    return undefined!;\n                }\n                return {\n                    actions: this.p2m.asCodeActions(actions),\n                    dispose: () => { }\n                };\n            }\n        };\n    }\n\n    protected createCodeLensProvider(selector: DocumentSelector, provider: CodeLensProvider): monaco.languages.CodeLensProvider {\n        return {\n            provideCodeLenses: async (model, token) => {\n                if (!this.matchModel(selector, MonacoModelIdentifier.fromModel(model))) {\n                    return undefined;\n                }\n                const params = this.m2p.asCodeLensParams(model);\n                const lenses = await provider.provideCodeLenses(params, token);\n                if (!lenses) {\n                    return undefined;\n                }\n                return {\n                    lenses: this.p2m.asCodeLenses(lenses),\n                    dispose: () => { }\n                };\n            },\n            resolveCodeLens: provider.resolveCodeLens ? async (model, codeLens, token) => {\n                if (!this.matchModel(selector, MonacoModelIdentifier.fromModel(model))) {\n                    return codeLens;\n                }\n                const protocolCodeLens = this.m2p.asCodeLens(codeLens);\n                const result = await provider.resolveCodeLens!(protocolCodeLens, token);\n                if (result) {\n                    const resolvedCodeLens = this.p2m.asCodeLens(result);\n                    Object.assign(codeLens, resolvedCodeLens);\n                }\n                return codeLens;\n            } : ((_, codeLens, __) => codeLens)\n        };\n    }\n\n}\n"],"sourceRoot":""}